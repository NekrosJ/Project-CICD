variables:
  IMAGE_NAME: nekrosj47/projectcicd
  IMAGE_TAG: react-app-1.0
  AWS_REGION: "us-east-1"
  SSH_USER: "ec2-user"
  EC2_PUBLIC_IP: "34.229.109.58"

stages:
  - install
  - build
  - test
  - deploy

install:
  stage: install
  image: node:16
  script:
    - npm install
  artifacts:
    paths:
      - node_modules/

build:
  stage: build
  image: docker:27.3.1-cli
  services:
    - docker:27.3.1-dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
    - docker login -u $REGISTRY_USER -p $REGISTRY_PASS $REGISTRY_URL
  script:
    - docker build -t $IMAGE_NAME:$IMAGE_TAG .
    - docker push $IMAGE_NAME:$IMAGE_TAG

test:
  stage: test
  image: node:16
  before_script:
    - apt-get update && apt-get install -y build-essential
  script:
    - npm install
    - npm run test
  dependencies:
    - install

deploy:
  stage: deploy
  image: amazon/aws-cli:latest
  before_script:
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" | base64 -d > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - ssh-keyscan -H $EC2_PUBLIC_IP >> ~/.ssh/known_hosts
    - aws configure set region $AWS_REGION
    - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
  script:
    - ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ec2-user@$EC2_PUBLIC_IP "
        docker login -u $REGISTRY_USER -p $REGISTRY_PASS &&
        docker pull $IMAGE_NAME:$IMAGE_TAG &&
        docker stop $(docker ps -aq) && docker rm $(docker ps -aq) &&
        docker run -d -p 80:80 $IMAGE_NAME:$IMAGE_TAG"
  only:
    - master
  dependencies:
    - build




# # Job to deploy the application
# deploy:
#   stage: deploy
#   before_script:
#     - chmod 400 $SSH_KEY  # Make sure the SSH key is correct
#   script:
#     - ssh -o StrictHostKeyChecking=no -i $SSH_KEY root@161.35.223.117 "
#         docker login -u $REGISTRY_USER -p $REGISTRY_PASS &&
#         docker ps -aq | xargs docker stop | xargs docker rm &&
#         docker run -d -p 5000:5000 $IMAGE_NAME:$IMAGE_TAG"
